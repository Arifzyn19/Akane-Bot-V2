<!-- Header -->
<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 space-y-4 sm:space-y-0">
    <h1 class="text-3xl font-bold text-white">Message Management</h1>
    <div class="flex space-x-2">
        <button onclick="showSendMessageModal()" class="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
            <i data-lucide="send" class="w-4 h-4"></i>
            <span>Send Message</span>
        </button>
        <button onclick="refreshMessages()" class="flex items-center space-x-2 bg-dark-800 hover:bg-dark-700 border border-dark-600 text-white px-4 py-2 rounded-lg transition-colors">
            <i data-lucide="refresh-cw" class="w-4 h-4"></i>
            <span>Refresh</span>
        </button>
    </div>
</div>

<!-- Message Filters -->
<div class="bg-dark-800 rounded-xl border border-dark-700 p-6 mb-8">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end">
        <div>
            <label for="filterType" class="block text-sm font-medium text-dark-300 mb-2">Message Type</label>
            <select id="filterType" onchange="filterMessages()" class="w-full bg-dark-900 border border-dark-600 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors">
                <option value="">All Types</option>
                <option value="text">Text</option>
                <option value="image">Image</option>
                <option value="video">Video</option>
                <option value="audio">Audio</option>
                <option value="document">Document</option>
            </select>
        </div>
        <div>
            <label for="filterSender" class="block text-sm font-medium text-dark-300 mb-2">Sender</label>
            <input type="text" id="filterSender" placeholder="Phone number or name" onkeyup="filterMessages()" 
                   class="w-full bg-dark-900 border border-dark-600 text-white placeholder-dark-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors">
        </div>
        <div>
            <label for="filterDate" class="block text-sm font-medium text-dark-300 mb-2">Date</label>
            <input type="date" id="filterDate" onchange="filterMessages()" 
                   class="w-full bg-dark-900 border border-dark-600 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors">
        </div>
        <div>
            <button onclick="clearFilters()" class="w-full flex items-center justify-center space-x-2 bg-dark-700 hover:bg-dark-600 border border-dark-600 text-white py-2 px-4 rounded-lg transition-colors">
                <i data-lucide="x-circle" class="w-4 h-4"></i>
                <span>Clear Filters</span>
            </button>
        </div>
    </div>
</div>

<!-- Messages List -->
<div class="bg-dark-800 rounded-xl border border-dark-700 overflow-hidden">
    <div class="flex items-center justify-between p-6 border-b border-dark-700">
        <div class="flex items-center space-x-2">
            <i data-lucide="message-circle" class="w-5 h-5 text-blue-400"></i>
            <h2 class="text-xl font-semibold text-white">Recent Messages</h2>
            <span class="px-2 py-1 bg-blue-600 text-white text-sm font-semibold rounded-full" id="messageCount">
                <%= messages ? messages.length : 0 %>
            </span>
        </div>
    </div>
    
    <div id="messagesList">
        <% if (messages && messages.length > 0) { %>
            <% messages.forEach(function(message, index) { %>
                <div class="message-item border-b border-dark-700 p-4 hover:bg-dark-750 transition-colors" 
                     data-type="<%= message.type || 'text' %>" 
                     data-sender="<%= message.sender %>" 
                     data-date="<%= message.date %>">
                    <div class="flex items-start space-x-4">
                        <!-- Avatar -->
                        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                            <i data-lucide="user" class="w-5 h-5 text-white"></i>
                        </div>
                        
                        <!-- Message Content -->
                        <div class="flex-1 min-w-0">
                            <div class="flex items-start justify-between mb-2">
                                <div>
                                    <h3 class="text-white font-medium"><%= message.senderName || message.sender %></h3>
                                    <div class="flex items-center space-x-2 text-sm text-dark-400">
                                        <div class="flex items-center space-x-1">
                                            <i data-lucide="phone" class="w-3 h-3"></i>
                                            <span><%= message.sender %></span>
                                        </div>
                                        <span>â€¢</span>
                                        <div class="flex items-center space-x-1">
                                            <i data-lucide="clock" class="w-3 h-3"></i>
                                            <span><%= new Date(message.timestamp).toLocaleString() %></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <span class="px-2 py-1 text-xs font-semibold rounded bg-<%= message.type === 'text' ? 'blue' : 'purple' %>-600 text-white">
                                        <%= message.type || 'text' %>
                                    </span>
                                    <% if (message.isGroup) { %>
                                        <span class="px-2 py-1 text-xs font-semibold rounded bg-green-600 text-white">Group</span>
                                    <% } %>
                                </div>
                            </div>
                            
                            <!-- Message Body -->
                            <div class="text-dark-200 mb-2">
                                <% if (message.type === 'text' || !message.type) { %>
                                    <p class="break-words"><%= message.content %></p>
                                <% } else if (message.type === 'image') { %>
                                    <div class="flex items-center space-x-2">
                                        <i data-lucide="image" class="w-4 h-4 text-blue-400"></i>
                                        <span>Image message</span>
                                        <% if (message.caption) { %>
                                            <span>â€¢</span>
                                            <span class="text-dark-400"><%= message.caption %></span>
                                        <% } %>
                                    </div>
                                <% } else { %>
                                    <div class="flex items-center space-x-2">
                                        <i data-lucide="file" class="w-4 h-4 text-gray-400"></i>
                                        <span><%= message.type.charAt(0).toUpperCase() + message.type.slice(1) %> message</span>
                                    </div>
                                <% } %>
                            </div>
                            
                            <!-- Quoted Message -->
                            <% if (message.quotedMessage) { %>
                                <div class="bg-dark-700 border-l-4 border-blue-500 p-3 rounded-r-lg">
                                    <div class="flex items-center space-x-2 text-sm text-dark-400">
                                        <i data-lucide="corner-up-left" class="w-3 h-3"></i>
                                        <span>Replying to: <%= message.quotedMessage %></span>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                        
                        <!-- Actions Menu -->
                        <div class="relative">
                            <button class="p-2 text-dark-400 hover:text-white hover:bg-dark-700 rounded-lg transition-colors" onclick="toggleMessageMenu('<%= index %>')">
                                <i data-lucide="more-vertical" class="w-4 h-4"></i>
                            </button>
                            <div id="menu-<%= index %>" class="absolute right-0 mt-2 w-48 bg-dark-700 border border-dark-600 rounded-lg shadow-lg z-10 hidden">
                                <button onclick="replyToMessage('<%= message.sender %>')" class="w-full flex items-center space-x-2 px-4 py-2 text-left text-dark-300 hover:text-white hover:bg-dark-600 rounded-t-lg transition-colors">
                                    <i data-lucide="reply" class="w-4 h-4"></i>
                                    <span>Reply</span>
                                </button>
                                <button onclick="viewMessageDetails('<%= index %>')" class="w-full flex items-center space-x-2 px-4 py-2 text-left text-dark-300 hover:text-white hover:bg-dark-600 rounded-b-lg transition-colors">
                                    <i data-lucide="info" class="w-4 h-4"></i>
                                    <span>Details</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <div class="text-center py-12">
                <i data-lucide="message-circle" class="w-16 h-16 text-dark-400 mx-auto mb-4"></i>
                <p class="text-dark-400 text-lg">No messages found</p>
                <% if (typeof error !== 'undefined' && error) { %>
                    <p class="text-red-400 text-sm mt-2"><%= error %></p>
                <% } %>
            </div>
        <% } %>
    </div>
    
    <!-- Load More Button -->
    <div class="text-center p-6 border-t border-dark-700">
        <button onclick="loadMoreMessages()" class="flex items-center justify-center space-x-2 bg-dark-700 hover:bg-dark-600 border border-dark-600 text-white px-6 py-3 rounded-lg transition-colors">
            <i data-lucide="chevron-down" class="w-4 h-4"></i>
            <span>Load More Messages</span>
        </button>
    </div>
</div>

<!-- Send Message Modal -->
<div id="sendMessageModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-dark-800 rounded-xl border border-dark-700 p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-white">Send Message</h3>
            <button onclick="closeSendMessageModal()" class="text-dark-400 hover:text-white transition-colors">
                <i data-lucide="x" class="w-5 h-5"></i>
            </button>
        </div>
        
        <form id="sendMessageForm" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="messageRecipient" class="block text-sm font-medium text-dark-300 mb-2">Recipient</label>
                    <input type="text" id="messageRecipient" required
                           placeholder="628123456789"
                           class="w-full bg-dark-900 border border-dark-600 text-white placeholder-dark-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors">
                    <p class="text-xs text-dark-400 mt-1">Enter phone number with country code (without +)</p>
                </div>
                <div>
                    <label for="messageType" class="block text-sm font-medium text-dark-300 mb-2">Message Type</label>
                    <select id="messageType" onchange="toggleMessageFields()" 
                            class="w-full bg-dark-900 border border-dark-600 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors">
                        <option value="text">Text Message</option>
                        <option value="image">Image</option>
                        <option value="document">Document</option>
                    </select>
                </div>
            </div>
            
            <!-- Text Message Fields -->
            <div id="textMessageFields">
                <div>
                    <label for="messageContent" class="block text-sm font-medium text-dark-300 mb-2">Message</label>
                    <textarea id="messageContent" rows="4" required
                              placeholder="Enter your message here..."
                              class="w-full bg-dark-900 border border-dark-600 text-white placeholder-dark-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors resize-none"></textarea>
                </div>
            </div>
            
            <!-- Media Message Fields -->
            <div id="mediaMessageFields" class="hidden space-y-4">
                <div>
                    <label for="mediaFile" class="block text-sm font-medium text-dark-300 mb-2">File</label>
                    <input type="file" id="mediaFile" accept="image/*,application/pdf,.doc,.docx"
                           class="w-full bg-dark-900 border border-dark-600 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-blue-600 file:text-white file:cursor-pointer hover:file:bg-blue-700">
                </div>
                <div>
                    <label for="mediaCaption" class="block text-sm font-medium text-dark-300 mb-2">Caption (Optional)</label>
                    <textarea id="mediaCaption" rows="2" 
                              placeholder="Enter caption..."
                              class="w-full bg-dark-900 border border-dark-600 text-white placeholder-dark-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors resize-none"></textarea>
                </div>
            </div>
        </form>
        
        <div class="flex justify-end space-x-3 mt-6">
            <button onclick="closeSendMessageModal()" class="px-4 py-2 text-dark-300 hover:text-white transition-colors">
                Cancel
            </button>
            <button onclick="sendMessage()" class="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors">
                <i data-lucide="send" class="w-4 h-4"></i>
                <span>Send Message</span>
            </button>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

<script>
let currentOffset = 0;
let isLoading = false;

document.addEventListener('DOMContentLoaded', function() {
    // Initialize Lucide icons
    lucide.createIcons();
    
    initializeSocket();
    
    // Close menus when clicking outside
    document.addEventListener('click', function(event) {
        const menus = document.querySelectorAll('[id^="menu-"]');
        menus.forEach(menu => {
            if (!menu.contains(event.target) && !event.target.closest('button[onclick^="toggleMessageMenu"]')) {
                menu.classList.add('hidden');
            }
        });
    });
});

function initializeSocket() {
    const socket = io();
    
    socket.emit('join-admin', { isAdmin: true });
    
    socket.on('new-message', function(data) {
        addNewMessageToList(data);
        updateMessageCount();
    });
}

function toggleMessageMenu(index) {
    const menu = document.getElementById(`menu-${index}`);
    const allMenus = document.querySelectorAll('[id^="menu-"]');
    
    // Close other menus
    allMenus.forEach(m => {
        if (m !== menu) {
            m.classList.add('hidden');
        }
    });
    
    // Toggle current menu
    menu.classList.toggle('hidden');
}

function addNewMessageToList(messageData) {
    const messagesList = document.getElementById('messagesList');
    const messageItem = createMessageElement(messageData);
    
    // Add to top of list
    const firstMessage = messagesList.querySelector('.message-item');
    if (firstMessage) {
        messagesList.insertBefore(messageItem, firstMessage);
    } else {
        messagesList.appendChild(messageItem);
    }
    
    // Highlight new message
    messageItem.classList.add('bg-blue-900', 'bg-opacity-20');
    setTimeout(() => {
        messageItem.classList.remove('bg-blue-900', 'bg-opacity-20');
    }, 3000);
    
    // Re-initialize icons
    lucide.createIcons();
}

function createMessageElement(message, index = 0) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-item border-b border-dark-700 p-4 hover:bg-dark-750 transition-colors';
    messageDiv.setAttribute('data-type', message.type || 'text');
    messageDiv.setAttribute('data-sender', message.sender);
    messageDiv.setAttribute('data-date', new Date(message.timestamp).toDateString());
    
    messageDiv.innerHTML = `
        <div class="flex items-start space-x-4">
            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                <i data-lucide="user" class="w-5 h-5 text-white"></i>
            </div>
            <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between mb-2">
                    <div>
                        <h3 class="text-white font-medium">${message.senderName || message.sender}</h3>
                        <div class="flex items-center space-x-2 text-sm text-dark-400">
                            <div class="flex items-center space-x-1">
                                <i data-lucide="phone" class="w-3 h-3"></i>
                                <span>${message.sender}</span>
                            </div>
                            <span>â€¢</span>
                            <div class="flex items-center space-x-1">
                                <i data-lucide="clock" class="w-3 h-3"></i>
                                <span>${new Date(message.timestamp).toLocaleString()}</span>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="px-2 py-1 text-xs font-semibold rounded bg-${message.type === 'text' ? 'blue' : 'purple'}-600 text-white">
                            ${message.type || 'text'}
                        </span>
                        ${message.isGroup ? '<span class="px-2 py-1 text-xs font-semibold rounded bg-green-600 text-white">Group</span>' : ''}
                    </div>
                </div>
                <div class="text-dark-200 mb-2">
                    ${getMessageContentHTML(message)}
                </div>
            </div>
            <div class="relative">
                <button class="p-2 text-dark-400 hover:text-white hover:bg-dark-700 rounded-lg transition-colors" onclick="toggleMessageMenu('${index}')">
                    <i data-lucide="more-vertical" class="w-4 h-4"></i>
                </button>
                <div id="menu-${index}" class="absolute right-0 mt-2 w-48 bg-dark-700 border border-dark-600 rounded-lg shadow-lg z-10 hidden">
                    <button onclick="replyToMessage('${message.sender}')" class="w-full flex items-center space-x-2 px-4 py-2 text-left text-dark-300 hover:text-white hover:bg-dark-600 rounded-t-lg transition-colors">
                        <i data-lucide="reply" class="w-4 h-4"></i>
                        <span>Reply</span>
                    </button>
                    <button onclick="viewMessageDetails('${index}')" class="w-full flex items-center space-x-2 px-4 py-2 text-left text-dark-300 hover:text-white hover:bg-dark-600 rounded-b-lg transition-colors">
                        <i data-lucide="info" class="w-4 h-4"></i>
                        <span>Details</span>
                    </button>
                </div>
            </div>
        </div>
    `;
    
    return messageDiv;
}

function getMessageContentHTML(message) {
    if (message.type === 'text' || !message.type) {
        return `<p class="break-words">${message.content}</p>`;
    } else if (message.type === 'image') {
        return `
            <div class="flex items-center space-x-2">
                <i data-lucide="image" class="w-4 h-4 text-blue-400"></i>
                <span>Image message</span>
                ${message.caption ? `<span>â€¢</span><span class="text-dark-400">${message.caption}</span>` : ''}
            </div>
        `;
    } else {
        return `
            <div class="flex items-center space-x-2">
                <i data-lucide="file" class="w-4 h-4 text-gray-400"></i>
                <span>${message.type.charAt(0).toUpperCase() + message.type.slice(1)} message</span>
            </div>
        `;
    }
}

function filterMessages() {
    const typeFilter = document.getElementById('filterType').value;
    const senderFilter = document.getElementById('filterSender').value.toLowerCase();
    const dateFilter = document.getElementById('filterDate').value;
    
    const messages = document.querySelectorAll('.message-item');
    let visibleCount = 0;
    
    messages.forEach(message => {
        const messageType = message.getAttribute('data-type');
        const messageSender = message.getAttribute('data-sender').toLowerCase();
        const messageDate = message.getAttribute('data-date');
        
        let show = true;
        
        if (typeFilter && messageType !== typeFilter) {
            show = false;
        }
        
        if (senderFilter && !messageSender.includes(senderFilter)) {
            show = false;
        }
        
        if (dateFilter && !messageDate.includes(new Date(dateFilter).toDateString())) {
            show = false;
        }
        
        message.style.display = show ? 'block' : 'none';
        if (show) visibleCount++;
    });
    
    document.getElementById('messageCount').textContent = visibleCount;
}

function clearFilters() {
    document.getElementById('filterType').value = '';
    document.getElementById('filterSender').value = '';
    document.getElementById('filterDate').value = '';
    filterMessages();
}

function refreshMessages() {
    location.reload();
}

async function loadMoreMessages() {
    if (isLoading) return;
    
    isLoading = true;
    const button = event.target.closest('button');
    const originalHTML = button.innerHTML;
    button.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 animate-spin"></i><span>Loading...</span>';
    button.disabled = true;
    
    // Re-initialize icons for the loading state
    lucide.createIcons();
    
    try {
        currentOffset += 50;
        const response = await fetch(`/api/messages?limit=50&offset=${currentOffset}`);
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
            const messagesList = document.getElementById('messagesList');
            const loadMoreSection = button.closest('.text-center');
            
            data.data.forEach((message, index) => {
                const messageElement = createMessageElement(message, currentOffset + index);
                messagesList.insertBefore(messageElement, loadMoreSection);
            });
            
            updateMessageCount();
            lucide.createIcons();
        } else {
            button.style.display = 'none';
            showToast('No more messages to load', 'info');
        }
    } catch (error) {
        showToast('Failed to load more messages', 'error');
    } finally {
        button.innerHTML = originalHTML;
        button.disabled = false;
        isLoading = false;
        lucide.createIcons();
    }
}

function updateMessageCount() {
    const visibleMessages = document.querySelectorAll('.message-item:not([style*="display: none"])');
    document.getElementById('messageCount').textContent = visibleMessages.length;
}

function showSendMessageModal() {
    const modal = document.getElementById('sendMessageModal');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    
    // Re-initialize icons in modal
    lucide.createIcons();
}

function closeSendMessageModal() {
    const modal = document.getElementById('sendMessageModal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.getElementById('sendMessageForm').reset();
    toggleMessageFields(); // Reset form fields
}

function toggleMessageFields() {
    const messageType = document.getElementById('messageType').value;
    const textFields = document.getElementById('textMessageFields');
    const mediaFields = document.getElementById('mediaMessageFields');
    
    if (messageType === 'text') {
        textFields.classList.remove('hidden');
        mediaFields.classList.add('hidden');
        document.getElementById('messageContent').required = true;
        document.getElementById('mediaFile').required = false;
    } else {
        textFields.classList.add('hidden');
        mediaFields.classList.remove('hidden');
        document.getElementById('messageContent').required = false;
        document.getElementById('mediaFile').required = true;
    }
}

async function sendMessage() {
    const messageType = document.getElementById('messageType').value;
    const recipient = document.getElementById('messageRecipient').value;
    
    let messageData = {
        to: recipient,
        type: messageType
    };
    
    if (messageType === 'text') {
        const content = document.getElementById('messageContent').value;
        if (!recipient || !content) {
            showToast('Please fill in all required fields', 'warning');
            return;
        }
        messageData.message = content;
    } else {
        const file = document.getElementById('mediaFile').files[0];
        const caption = document.getElementById('mediaCaption').value;
        
        if (!recipient || !file) {
            showToast('Please fill in all required fields', 'warning');
            return;
        }
        
        messageData.message = caption || `${messageType} message`;
        messageData.caption = caption;
    }
    
    try {
        const response = await fetch('/api/send-message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(messageData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            showToast('Message sent successfully', 'success');
            closeSendMessageModal();
        } else {
            showToast('Failed to send message: ' + data.error, 'error');
        }
    } catch (error) {
        showToast('Failed to send message', 'error');
    }
}

function replyToMessage(sender) {
    document.getElementById('messageRecipient').value = sender;
    showSendMessageModal();
}

function viewMessageDetails(index) {
    showToast('Message details feature coming soon', 'info');
}

function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    
    const colorClasses = {
        'success': 'bg-green-600 border-green-500',
        'error': 'bg-red-600 border-red-500', 
        'warning': 'bg-yellow-600 border-yellow-500',
        'info': 'bg-blue-600 border-blue-500'
    };
    
    const iconMap = {
        'success': 'check-circle',
        'error': 'x-circle',
        'warning': 'alert-triangle', 
        'info': 'info'
    };
    
    const toastId = 'toast-' + Date.now();
    const toastHtml = `
        <div id="${toastId}" class="flex items-center space-x-3 ${colorClasses[type]} text-white px-4 py-3 rounded-lg shadow-lg border transform translate-x-full transition-transform duration-300">
            <i data-lucide="${iconMap[type]}" class="w-5 h-5 flex-shrink-0"></i>
            <span class="flex-1">${message}</span>
            <button onclick="closeToast('${toastId}')" class="text-white hover:text-gray-200 transition-colors">
                <i data-lucide="x" class="w-4 h-4"></i>
            </button>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    // Initialize icons and animate in
    lucide.createIcons();
    
    const toastElement = document.getElementById(toastId);
    setTimeout(() => {
        toastElement.classList.remove('translate-x-full');
    }, 100);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        closeToast(toastId);
    }, 5000);
}

function closeToast(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
        toast.classList.add('translate-x-full');
        setTimeout(() => {
            toast.remove();
        }, 300);
    }
}

// Close modal when clicking outside
document.addEventListener('click', function(event) {
    const sendModal = document.getElementById('sendMessageModal');
    if (event.target === sendModal) {
        closeSendMessageModal();
    }
});

// Handle escape key to close modal
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeSendMessageModal();
    }
});
</script>