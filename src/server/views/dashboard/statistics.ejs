<!-- Header -->
<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 space-y-4 sm:space-y-0">
    <h1 class="text-3xl font-bold text-white">Statistics & Analytics</h1>
    <div class="flex space-x-2">
        <select id="timeRange" onchange="updateTimeRange()" class="bg-dark-800 border border-dark-600 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3 py-2 rounded-lg transition-colors">
            <option value="today">Today</option>
            <option value="week" selected>This Week</option>
            <option value="month">This Month</option>
            <option value="year">This Year</option>
        </select>
        <button onclick="refreshStats()" class="flex items-center space-x-2 bg-dark-800 hover:bg-dark-700 border border-dark-600 text-white px-4 py-2 rounded-lg transition-colors">
            <i data-lucide="refresh-cw" class="w-4 h-4"></i>
            <span>Refresh</span>
        </button>
    </div>
</div>

<!-- Overview Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <div class="bg-gradient-to-r from-blue-600 to-blue-700 p-6 rounded-xl shadow-lg">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-blue-100 text-sm font-medium">Total Messages</p>
                <p class="text-white text-3xl font-bold" id="totalMessages">
                    <%= stats.messages?.total || 0 %>
                </p>
                <div class="flex items-center mt-2">
                    <i data-lucide="trending-up" class="w-4 h-4 text-green-300 mr-1"></i>
                    <span class="text-green-300 text-sm">+<span id="messagesToday"><%= stats.messages?.today || 0 %></span> today</span>
                </div>
            </div>
            <div class="bg-blue-500 bg-opacity-30 p-3 rounded-lg">
                <i data-lucide="message-circle" class="w-8 h-8 text-white"></i>
            </div>
        </div>
    </div>

    <div class="bg-gradient-to-r from-green-600 to-emerald-600 p-6 rounded-xl shadow-lg">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-green-100 text-sm font-medium">Total Users</p>
                <p class="text-white text-3xl font-bold" id="totalUsers">
                    <%= stats.users?.total || 0 %>
                </p>
                <div class="flex items-center mt-2">
                    <i data-lucide="user-plus" class="w-4 h-4 text-blue-300 mr-1"></i>
                    <span class="text-blue-300 text-sm"><span id="activeUsers"><%= stats.users?.active || 0 %></span> active</span>
                </div>
            </div>
            <div class="bg-green-500 bg-opacity-30 p-3 rounded-lg">
                <i data-lucide="users" class="w-8 h-8 text-white"></i>
            </div>
        </div>
    </div>

    <div class="bg-gradient-to-r from-yellow-600 to-orange-600 p-6 rounded-xl shadow-lg">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-yellow-100 text-sm font-medium">Commands Used</p>
                <p class="text-white text-3xl font-bold" id="totalCommands">
                    <%= Object.values(stats.commands || {}).reduce((a, b) => a + b, 0) %>
                </p>
                <div class="flex items-center mt-2">
                    <i data-lucide="zap" class="w-4 h-4 text-yellow-300 mr-1"></i>
                    <span class="text-yellow-300 text-sm"><span id="commandsToday">0</span> today</span>
                </div>
            </div>
            <div class="bg-yellow-500 bg-opacity-30 p-3 rounded-lg">
                <i data-lucide="terminal" class="w-8 h-8 text-white"></i>
            </div>
        </div>
    </div>

    <div class="bg-gradient-to-r from-purple-600 to-pink-600 p-6 rounded-xl shadow-lg">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-purple-100 text-sm font-medium">Groups</p>
                <p class="text-white text-3xl font-bold" id="totalGroups">
                    <%= stats.groups?.total || 0 %>
                </p>
                <div class="flex items-center mt-2">
                    <i data-lucide="users" class="w-4 h-4 text-purple-300 mr-1"></i>
                    <span class="text-purple-300 text-sm"><span id="activeGroups"><%= stats.groups?.active || 0 %></span> active</span>
                </div>
            </div>
            <div class="bg-purple-500 bg-opacity-30 p-3 rounded-lg">
                <i data-lucide="users" class="w-8 h-8 text-white"></i>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
    <div class="lg:col-span-2 bg-dark-800 rounded-xl border border-dark-700 p-6">
        <div class="flex items-center space-x-2 mb-6">
            <i data-lucide="trending-up" class="w-5 h-5 text-blue-400"></i>
            <h2 class="text-xl font-semibold text-white">Message Activity</h2>
        </div>
        <div class="relative h-80">
            <canvas id="messageChart"></canvas>
        </div>
    </div>
    
    <div class="bg-dark-800 rounded-xl border border-dark-700 p-6">
        <div class="flex items-center space-x-2 mb-6">
            <i data-lucide="pie-chart" class="w-5 h-5 text-purple-400"></i>
            <h2 class="text-xl font-semibold text-white">Message Types</h2>
        </div>
        <div class="relative h-80">
            <canvas id="messageTypeChart"></canvas>
        </div>
    </div>
</div>

<!-- Command Usage & Top Users -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
    <div class="bg-dark-800 rounded-xl border border-dark-700 p-6">
        <div class="flex items-center space-x-2 mb-6">
            <i data-lucide="zap" class="w-5 h-5 text-yellow-400"></i>
            <h2 class="text-xl font-semibold text-white">Top Commands</h2>
        </div>
        <div id="commandStats" class="space-y-4">
            <% if (stats.commands && Object.keys(stats.commands).length > 0) { %>
                <% Object.entries(stats.commands).sort((a, b) => b[1] - a[1]).slice(0, 10).forEach(function([command, count]) { %>
                    <div class="flex items-center justify-between p-3 bg-dark-700 rounded-lg">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                                <i data-lucide="terminal" class="w-5 h-5 text-white"></i>
                            </div>
                            <div>
                                <p class="text-white font-medium"><%= command %></p>
                                <p class="text-dark-400 text-sm">Command</p>
                            </div>
                        </div>
                        <div class="text-right">
                            <p class="text-white font-bold"><%= count %></p>
                            <p class="text-dark-400 text-sm">uses</p>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="text-center py-8">
                    <i data-lucide="terminal" class="w-16 h-16 text-dark-400 mx-auto mb-4"></i>
                    <p class="text-dark-400">No command usage data</p>
                </div>
            <% } %>
        </div>
    </div>
    
    <div class="bg-dark-800 rounded-xl border border-dark-700 p-6">
        <div class="flex items-center space-x-2 mb-6">
            <i data-lucide="star" class="w-5 h-5 text-yellow-400"></i>
            <h2 class="text-xl font-semibold text-white">Top Users</h2>
        </div>
        <div id="topUsers" class="space-y-4">
            <div class="flex items-center justify-between p-3 bg-dark-700 rounded-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                        <i data-lucide="user" class="w-5 h-5 text-white"></i>
                    </div>
                    <div>
                        <p class="text-white font-medium">User #1</p>
                        <p class="text-dark-400 text-sm">+62812345678</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-white font-bold">156</p>
                    <p class="text-dark-400 text-sm">messages</p>
                </div>
            </div>
            
            <div class="flex items-center justify-between p-3 bg-dark-700 rounded-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full flex items-center justify-center">
                        <i data-lucide="user" class="w-5 h-5 text-white"></i>
                    </div>
                    <div>
                        <p class="text-white font-medium">User #2</p>
                        <p class="text-dark-400 text-sm">+62812345679</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-white font-bold">142</p>
                    <p class="text-dark-400 text-sm">messages</p>
                </div>
            </div>
            
            <div class="flex items-center justify-between p-3 bg-dark-700 rounded-lg">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-full flex items-center justify-center">
                        <i data-lucide="user" class="w-5 h-5 text-white"></i>
                    </div>
                    <div>
                        <p class="text-white font-medium">User #3</p>
                        <p class="text-dark-400 text-sm">+62812345680</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-white font-bold">98</p>
                    <p class="text-dark-400 text-sm">messages</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- System Performance -->
<div class="bg-dark-800 rounded-xl border border-dark-700 p-6">
    <div class="flex items-center space-x-2 mb-6">
        <i data-lucide="cpu" class="w-5 h-5 text-green-400"></i>
        <h2 class="text-xl font-semibold text-white">System Performance</h2>
    </div>
    
    <div class="grid grid-cols-2 md:grid-cols-4 gap-6 mb-6">
        <div class="text-center p-4 bg-dark-700 rounded-lg">
            <p class="text-2xl font-bold text-blue-400">
                <%= Math.floor(process.uptime() / 3600) %>h <%= Math.floor((process.uptime() % 3600) / 60) %>m
            </p>
            <p class="text-dark-400 text-sm">Uptime</p>
        </div>
        <div class="text-center p-4 bg-dark-700 rounded-lg">
            <p class="text-2xl font-bold text-green-400" id="memoryUsage">
                <%= Math.round(process.memoryUsage().heapUsed / 1024 / 1024) %>MB
            </p>
            <p class="text-dark-400 text-sm">Memory Usage</p>
        </div>
        <div class="text-center p-4 bg-dark-700 rounded-lg">
            <p class="text-2xl font-bold text-purple-400">
                <%= process.version %>
            </p>
            <p class="text-dark-400 text-sm">Node.js Version</p>
        </div>
        <div class="text-center p-4 bg-dark-700 rounded-lg">
            <p class="text-2xl font-bold text-yellow-400">
                <%= process.platform %>
            </p>
            <p class="text-dark-400 text-sm">Platform</p>
        </div>
    </div>
    
    <div class="relative h-64">
        <canvas id="performanceChart"></canvas>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
let messageChart, messageTypeChart, performanceChart;

document.addEventListener('DOMContentLoaded', function() {
    // Initialize Lucide icons
    lucide.createIcons();
    
    initializeCharts();
    startRealTimeUpdates();
});

function initializeCharts() {
    // Configure Chart.js defaults for dark theme
    Chart.defaults.color = '#9AA0A6';
    Chart.defaults.borderColor = '#5F6368';
    Chart.defaults.backgroundColor = 'rgba(102, 126, 234, 0.1)';

    // Message Activity Chart
    const messageCtx = document.getElementById('messageChart').getContext('2d');
    messageChart = new Chart(messageCtx, {
        type: 'line',
        data: {
            labels: generateTimeLabels(),
            datasets: [{
                label: 'Messages',
                data: generateSampleData(24),
                borderColor: '#667eea',
                backgroundColor: 'rgba(102, 126, 234, 0.1)',
                tension: 0.4,
                fill: true,
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: '#3C4043'
                    },
                    ticks: {
                        color: '#9AA0A6'
                    }
                },
                x: {
                    grid: {
                        display: false
                    },
                    ticks: {
                        color: '#9AA0A6'
                    }
                }
            }
        }
    });

    // Message Type Chart
    const typeCtx = document.getElementById('messageTypeChart').getContext('2d');
    messageTypeChart = new Chart(typeCtx, {
        type: 'doughnut',
        data: {
            labels: ['Text', 'Image', 'Video', 'Audio', 'Document'],
            datasets: [{
                data: [65, 20, 8, 4, 3],
                backgroundColor: [
                    '#667eea',
                    '#28a745',
                    '#ffc107',
                    '#dc3545',
                    '#6c757d'
                ],
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        color: '#9AA0A6',
                        usePointStyle: true,
                        padding: 20
                    }
                }
            }
        }
    });

    // Performance Chart
    const perfCtx = document.getElementById('performanceChart').getContext('2d');
    performanceChart = new Chart(perfCtx, {
        type: 'line',
        data: {
            labels: generateTimeLabels(12),
            datasets: [{
                label: 'Memory (MB)',
                data: generateSampleData(12, 50, 150),
                borderColor: '#28a745',
                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                yAxisID: 'y',
                tension: 0.4,
                borderWidth: 2
            }, {
                label: 'CPU (%)',
                data: generateSampleData(12, 10, 80),
                borderColor: '#ffc107',
                backgroundColor: 'rgba(255, 193, 7, 0.1)',
                yAxisID: 'y1',
                tension: 0.4,
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    labels: {
                        color: '#9AA0A6',
                        usePointStyle: true
                    }
                }
            },
            scales: {
                y: {
                    type: 'linear',
                    display: true,
                    position: 'left',
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Memory (MB)',
                        color: '#9AA0A6'
                    },
                    grid: {
                        color: '#3C4043'
                    },
                    ticks: {
                        color: '#9AA0A6'
                    }
                },
                y1: {
                    type: 'linear',
                    display: true,
                    position: 'right',
                    beginAtZero: true,
                    max: 100,
                    title: {
                        display: true,
                        text: 'CPU (%)',
                        color: '#9AA0A6'
                    },
                    grid: {
                        drawOnChartArea: false,
                    },
                    ticks: {
                        color: '#9AA0A6'
                    }
                },
                x: {
                    grid: {
                        color: '#3C4043'
                    },
                    ticks: {
                        color: '#9AA0A6'
                    }
                }
            }
        }
    });
}

function generateTimeLabels(hours = 24) {
    const labels = [];
    const now = new Date();
    
    for (let i = hours - 1; i >= 0; i--) {
        const time = new Date(now.getTime() - (i * 60 * 60 * 1000));
        labels.push(time.getHours().toString().padStart(2, '0') + ':00');
    }
    
    return labels;
}

function generateSampleData(count, min = 0, max = 100) {
    const data = [];
    for (let i = 0; i < count; i++) {
        data.push(Math.floor(Math.random() * (max - min + 1)) + min);
    }
    return data;
}

function startRealTimeUpdates() {
    // Update charts every 30 seconds
    setInterval(updateCharts, 30000);
    
    // Update performance metrics every 10 seconds
    setInterval(updatePerformanceMetrics, 10000);
}

async function updateCharts() {
    try {
        const response = await fetch('/api/stats');
        const data = await response.json();
        
        if (data.success) {
            // Update overview cards
            document.getElementById('totalMessages').textContent = data.data.messages?.total || 0;
            document.getElementById('messagesToday').textContent = data.data.messages?.today || 0;
            document.getElementById('totalUsers').textContent = data.data.users?.total || 0;
            document.getElementById('activeUsers').textContent = data.data.users?.active || 0;
            
            // Update charts with new data
            updateMessageChart();
            updatePerformanceChart();
        }
    } catch (error) {
        console.error('Failed to update charts:', error);
    }
}

function updateMessageChart() {
    // Add new data point and remove oldest
    const newData = Math.floor(Math.random() * 50);
    messageChart.data.datasets[0].data.push(newData);
    messageChart.data.datasets[0].data.shift();
    
    // Update labels
    const now = new Date();
    const newLabel = now.getHours().toString().padStart(2, '0') + ':' + 
                    now.getMinutes().toString().padStart(2, '0');
    messageChart.data.labels.push(newLabel);
    messageChart.data.labels.shift();
    
    messageChart.update('none');
}

function updatePerformanceChart() {
    // Simulate performance data
    const memoryUsage = Math.floor(Math.random() * 100) + 50;
    const cpuUsage = Math.floor(Math.random() * 70) + 10;
    
    performanceChart.data.datasets[0].data.push(memoryUsage);
    performanceChart.data.datasets[0].data.shift();
    
    performanceChart.data.datasets[1].data.push(cpuUsage);
    performanceChart.data.datasets[1].data.shift();
    
    const now = new Date();
    const newLabel = now.getHours().toString().padStart(2, '0') + ':' + 
                    now.getMinutes().toString().padStart(2, '0');
    performanceChart.data.labels.push(newLabel);
    performanceChart.data.labels.shift();
    
    performanceChart.update('none');
}

async function updatePerformanceMetrics() {
    try {
        const response = await fetch('/api/status');
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('memoryUsage').textContent = 
                Math.round(data.data.memoryUsage.heapUsed / 1024 / 1024) + 'MB';
        }
    } catch (error) {
        console.error('Failed to update performance metrics:', error);
    }
}

function updateTimeRange() {
    const timeRange = document.getElementById('timeRange').value;
    
    // Update chart data based on selected time range
    let hours;
    switch (timeRange) {
        case 'today':
            hours = 24;
            break;
        case 'week':
            hours = 168; // 7 days
            break;
        case 'month':
            hours = 720; // 30 days
            break;
        case 'year':
            hours = 8760; // 365 days
            break;
        default:
            hours = 168;
    }
    
    // Regenerate chart data
    messageChart.data.labels = generateTimeLabels(Math.min(hours, 24));
    messageChart.data.datasets[0].data = generateSampleData(Math.min(hours, 24));
    messageChart.update();
    
    showToast(`Statistics updated for ${timeRange}`, 'info');
}

function refreshStats() {
    location.reload();
}

function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    
    const colorClasses = {
        'success': 'bg-green-600 border-green-500',
        'error': 'bg-red-600 border-red-500', 
        'warning': 'bg-yellow-600 border-yellow-500',
        'info': 'bg-blue-600 border-blue-500'
    };
    
    const iconMap = {
        'success': 'check-circle',
        'error': 'x-circle',
        'warning': 'alert-triangle', 
        'info': 'info'
    };
    
    const toastId = 'toast-' + Date.now();
    const toastHtml = `
        <div id="${toastId}" class="flex items-center space-x-3 ${colorClasses[type]} text-white px-4 py-3 rounded-lg shadow-lg border transform translate-x-full transition-transform duration-300">
            <i data-lucide="${iconMap[type]}" class="w-5 h-5 flex-shrink-0"></i>
            <span class="flex-1">${message}</span>
            <button onclick="closeToast('${toastId}')" class="text-white hover:text-gray-200 transition-colors">
                <i data-lucide="x" class="w-4 h-4"></i>
            </button>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    // Initialize icons and animate in
    lucide.createIcons();
    
    const toastElement = document.getElementById(toastId);
    setTimeout(() => {
        toastElement.classList.remove('translate-x-full');
    }, 100);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        closeToast(toastId);
    }, 5000);
}

function closeToast(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
        toast.classList.add('translate-x-full');
        setTimeout(() => {
            toast.remove();
        }, 300);
    }
}
</script> 